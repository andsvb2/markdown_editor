type: edu
files:
  - name: editor.py
    visible: true
    text: |
      # write your code here
    learner_created: false
  - name: test/__init__.py
    visible: false
    learner_created: false
  - name: test/tests.py
    visible: false
    text: |
      from hstest import StageTest, TestedProgram, CheckResult, dynamic_test
      
      
      class Test(StageTest):
      
          @dynamic_test
          def test1(self):
              pr = TestedProgram()
              pr.start()
      
              output = pr.execute('header').strip().lower()
              if 'level' not in output:
                  return CheckResult.wrong('Header formatter should prompt a user for both level and text, i.e "- Level: > "')
      
              output = pr.execute('4').strip().lower()
              if 'text' not in output.strip().lower():
                  return CheckResult.wrong('Header formatter should prompt a user for both level and text, i.e "- Text: > "')
      
              output = list(map(lambda item: item.lower(), pr.execute('Hello World!').split('\n')))
              if len(output) != 3:
                  return CheckResult.wrong('Please remember that header formatter switches to a new line automatically')
      
              if output[0].strip().split() != ['####', 'hello', 'world!']:
                  return CheckResult.wrong('Level 4 for header denotes as #### in markdown')
      
              if output[1]:
                  return CheckResult.wrong('Please check whether some redundant data is printed after a header')
      
              if 'formatter' not in output[2].strip():
                  return CheckResult.wrong('A user should be prompted for input again, i.e  "- Choose a formatter: > "')
      
              pr.execute('!done')
              if not pr.is_finished():
                  return CheckResult.wrong('Your program should finish its execution whenever !done is an input')
      
              return CheckResult.correct()
      
          @dynamic_test
          def test2(self):
              pr = TestedProgram()
              pr.start()
      
              output = pr.execute('plain').strip().lower()
              if 'text' not in output.strip().lower():
                  return CheckResult.wrong('Plain formatter should prompt a user for text, i.e "- Text: > "')
      
              output = list(map(lambda item: item.lower(), pr.execute('plain text').split('\n')))
              if len(output) != 2:
                  return CheckResult.wrong("Plain formatter should only return the given text as is, and prompt a user for a new formatter")
      
              if output[0] != 'plain text':
                  return CheckResult.wrong('Plain formatter returns the given text as is, without any extra symbols or tags')
      
              if 'formatter' not in output[1].strip():
                  return CheckResult.wrong('A user should be prompted for input again, i.e  "- Choose a formatter: > "')
      
              output = pr.execute('bold').strip().lower()
              if 'text' not in output:
                  return CheckResult.wrong('Bold formatter should prompt a user for text, i.e "- Text: > "')
      
              output = list(map(lambda item: item.lower(), pr.execute('bold text').split('\n')))
              if len(output) != 2:
                  return CheckResult.wrong("Bold formatter should only return the given text enclosed with '**' symbols, and prompt a user for a new formatter")
      
              if output[0] != 'plain text**bold text**':
                  return CheckResult.wrong('Plain formatter returns the given text as is, and does not switch to a new line')
      
              if 'formatter' not in output[1].strip():
                  return CheckResult.wrong('A user should be prompted for input again, i.e  "- Choose a formatter: > "')
      
              pr.execute('!done')
              if not pr.is_finished():
                  return CheckResult.wrong('Your program should finish its execution whenever !done is an input')
      
              return CheckResult.correct()
      
          @dynamic_test
          def test3(self):
              pr = TestedProgram()
              pr.start()
      
              output = pr.execute('italic').strip().lower()
              if 'text' not in output.strip().lower():
                  return CheckResult.wrong('Italic formatter should prompt a user for text, i.e "- Text: > "')
      
              output = list(map(lambda item: item.lower(), pr.execute('italic text').split('\n')))
              if len(output) != 2 or output[0] != '*italic text*':
                  return CheckResult.wrong("Bold formatter should only return the given text enclosed with '*' symbols, and prompt a user for a new formatter")
      
              if 'formatter' not in output[1].strip():
                  return CheckResult.wrong('A user should be prompted for input again, i.e  "- Choose a formatter: > "')
      
              output = pr.execute('inline-code').strip().lower()
              if 'text' not in output:
                  return CheckResult.wrong('Inline code formatter should prompt a user for text, i.e "- Text: > "')
      
              output = list(map(lambda item: item.lower(), pr.execute('code.work()').split('\n')))
              if len(output) != 2:
                  return CheckResult.wrong("Inline code formatter should only return the given text enclosed with '`' (backtick) symbols, and prompt a user for a new formatter")
      
              if output[0] != '*italic text*`code.work()`':
                  return CheckResult.wrong('Inline code formatter does not switch to a new line')
      
              if 'formatter' not in output[1].strip():
                  return CheckResult.wrong('A user should be prompted for input again, i.e  "- Choose a formatter: > "')
      
              pr.execute('!done')
              if not pr.is_finished():
                  return CheckResult.wrong('Your program should finish its execution whenever !done is an input')
      
              return CheckResult.correct()
      
          @dynamic_test
          def test4(self):
              pr = TestedProgram()
              pr.start()
      
              output = pr.execute('link').strip().lower()
              if 'label' not in output:
                  return CheckResult.wrong('Link formatter should prompt a user for both label and URL, i.e "- Label: > "')
      
              output = pr.execute('google').strip().lower()
              if 'url' not in output:
                  return CheckResult.wrong('Link formatter should prompt a user for both label and URL, i.e "- URL: > "')
      
              output = list(map(lambda item: item.lower(), pr.execute('https://www.google.com').split('\n')))
              if len(output) != 2:
                  return CheckResult.wrong('Link code formatter should only return the given label associated with a URL in the form [Label](URL), and prompt a user for a new formatter')
      
              if output[0] != '[google](https://www.google.com)':
                  return CheckResult.wrong('Please recall that for the given label and URL the correct link formatter return will be [Label](URL)')
      
              if 'formatter' not in output[1].strip():
                  return CheckResult.wrong('A user should be prompted for input again, i.e  "- Choose a formatter: > "')
      
              output = list(map(lambda item: item.lower(), pr.execute('new-line').split('\n')))
              if len(output) != 3 or output[1] != '':
                  return CheckResult.wrong('New-line formatter only moves the input pointer to the next line, and prompts a user for a new formatter')
      
              if output[0] != '[google](https://www.google.com)':
                  return CheckResult.wrong('Please make sure that the markdown state is saved')
      
              if 'formatter' not in output[2].strip():
                  return CheckResult.wrong('A user should be prompted for input again, i.e  "- Choose a formatter: > "')
      
              pr.execute('!done')
              if not pr.is_finished():
                  return CheckResult.wrong('Your program should finish its execution whenever !done is an input')
      
              return CheckResult.correct()
      
          @dynamic_test
          def test5(self):
              pr = TestedProgram()
              pr.start()
      
              output = pr.execute('ordered-list').strip().lower()
              if 'number' not in output:
                  return CheckResult.wrong('Ordered list formatter should prompt a user for the number of rows, i.e "- Number of rows: > "')
      
              output = list(map(lambda item: item.lower(), pr.execute('0').split('\n')))
              if len(output) < 2 or 'number' not in output[-1].strip():
                  return CheckResult.wrong('(Un)ordered list formatter should inform a user that the number of rows should be greater than zero if the input was invalid, and prompt the user for this input again, i.e "- Number of rows: > "')
      
              pr.execute('4')
              pr.execute('first')
              pr.execute('second')
              pr.execute('third')
              output = list(map(lambda item: item.lower(), pr.execute('fourth').split('\n')))
              if len(output) != 6:
                  return CheckResult.wrong('Ordered list formatter should switch to a new line automatically')
      
              if output[0] != '1. first' or output[1] != '2. second' or output[2] != '3. third' or output[3] != '4. fourth':
                  return CheckResult.wrong('Ordered list formatter should enumerate its rows in the following manner: "1. ", "2.", and so on, depending on the given number of rows.')
      
              if 'formatter' not in output[5].strip():
                  return CheckResult.wrong('A user should be prompted for input again, i.e  "- Choose a formatter: > "')
      
              pr.execute('!done')
              if not pr.is_finished():
                  return CheckResult.wrong('Your program should finish its execution whenever !done is an input')
      
              return CheckResult.correct()
      
          @dynamic_test
          def test6(self):
              pr = TestedProgram()
              pr.start()
      
              output = pr.execute('unordered-list').strip().lower()
              if 'number' not in output:
                  return CheckResult.wrong('Unordered list formatter should prompt a user for the number of rows, i.e "- Number of rows: > "')
      
              output = list(map(lambda item: item.lower(), pr.execute('-7').split('\n')))
              if len(output) < 2 or 'number' not in output[-1].strip():
                  return CheckResult.wrong('(Un)ordered list formatter should inform a user that the number of rows should be greater than zero if the input was invalid, and prompt the user for this input again, i.e "- Number of rows: > "')
      
              pr.execute('4')
              pr.execute('first')
              pr.execute('second')
              pr.execute('third')
              output = list(map(lambda item: item.lower(), pr.execute('fourth').split('\n')))
              if len(output) != 6:
                  return CheckResult.wrong('Unordered list formatter should switch to a new line automatically')
      
              unordered_list_chars = ('* ', '+ ', '- ')
              unordered_list_words = ['first', 'second', 'third', 'fourth']
              for item, word in zip(output[0:3], unordered_list_words):
                  if not item.startswith(unordered_list_chars) and word not in item:
                      return CheckResult.wrong('Unordered list formatter should begin each of the '
                                               'rows with the -, *, or + signs')
      
              if 'formatter' not in output[5].strip():
                  return CheckResult.wrong('A user should be prompted for input again, i.e  "- Choose a formatter: > "')
      
              pr.execute('!done')
              if not pr.is_finished():
                  return CheckResult.wrong('Your program should finish its execution whenever !done is an input')
      
              return CheckResult.correct()
      
      
      if __name__ == '__main__':
          Test().run_tests()
    learner_created: false
  - name: tests.py
    visible: false
    text: |-
      from test.tests import Test
      
      if __name__ == '__main__':    Test().run_tests()
    learner_created: false
  - name: beatles.md
    visible: true
    text: |-
      # John Lennon
      
      or ***John Winston Ono Lennon*** was one of *The Beatles*.
      
      Here are the songs he wrote I like the most:
      
      - Imagine
      - Norwegian Wood
      - Come Together
      - In My Life
      - ~~Hey Jude~~ (that was *McCartney*)
    learner_created: true
  - name: output.md
    visible: true
    learner_created: true
feedback_link: https://hyperskill.org/learn/step/12316#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Tue, 19 Sep 2023 18:48:58 UTC"
record: 4
